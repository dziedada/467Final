"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class arm_path_t(object):
    __slots__ = ["waypoints_num", "waypoints", "speed"]

    def __init__(self):
        self.waypoints_num = 0
        self.waypoints = []
        self.speed = 0.0

    def encode(self):
        buf = BytesIO()
        buf.write(arm_path_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">i", self.waypoints_num))
        for i0 in range(self.waypoints_num):
            buf.write(struct.pack('>2d', *self.waypoints[i0][:2]))
        buf.write(struct.pack(">d", self.speed))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != arm_path_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return arm_path_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = arm_path_t()
        self.waypoints_num = struct.unpack(">i", buf.read(4))[0]
        self.waypoints = []
        for i0 in range(self.waypoints_num):
            self.waypoints.append(struct.unpack('>2d', buf.read(16)))
        self.speed = struct.unpack(">d", buf.read(8))[0]
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if arm_path_t in parents: return 0
        tmphash = (0xb035843bfa4ee381) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if arm_path_t._packed_fingerprint is None:
            arm_path_t._packed_fingerprint = struct.pack(">Q", arm_path_t._get_hash_recursive([]))
        return arm_path_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

